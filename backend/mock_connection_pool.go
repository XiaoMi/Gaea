// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/XiaoMi/Gaea/backend (interfaces: ConnectionPool)

// Package backend is a generated GoMock package.
package backend

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockConnectionPool is a mock of ConnectionPool interface
type MockConnectionPool struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionPoolMockRecorder
}

// MockConnectionPoolMockRecorder is the mock recorder for MockConnectionPool
type MockConnectionPoolMockRecorder struct {
	mock *MockConnectionPool
}

// NewMockConnectionPool creates a new mock instance
func NewMockConnectionPool(ctrl *gomock.Controller) *MockConnectionPool {
	mock := &MockConnectionPool{ctrl: ctrl}
	mock.recorder = &MockConnectionPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConnectionPool) EXPECT() *MockConnectionPoolMockRecorder {
	return m.recorder
}

// Active mocks base method
func (m *MockConnectionPool) Active() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Active")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Active indicates an expected call of Active
func (mr *MockConnectionPoolMockRecorder) Active() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Active", reflect.TypeOf((*MockConnectionPool)(nil).Active))
}

// Addr mocks base method
func (m *MockConnectionPool) Addr() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Addr")
	ret0, _ := ret[0].(string)
	return ret0
}

// Addr indicates an expected call of Addr
func (mr *MockConnectionPoolMockRecorder) Addr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Addr", reflect.TypeOf((*MockConnectionPool)(nil).Addr))
}

// Available mocks base method
func (m *MockConnectionPool) Available() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Available")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Available indicates an expected call of Available
func (mr *MockConnectionPoolMockRecorder) Available() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Available", reflect.TypeOf((*MockConnectionPool)(nil).Available))
}

// Capacity mocks base method
func (m *MockConnectionPool) Capacity() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Capacity")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Capacity indicates an expected call of Capacity
func (mr *MockConnectionPoolMockRecorder) Capacity() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Capacity", reflect.TypeOf((*MockConnectionPool)(nil).Capacity))
}

// Close mocks base method
func (m *MockConnectionPool) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockConnectionPoolMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConnectionPool)(nil).Close))
}

// Datacenter mocks base method
func (m *MockConnectionPool) Datacenter() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Datacenter")
	ret0, _ := ret[0].(string)
	return ret0
}

// Datacenter indicates an expected call of Datacenter
func (mr *MockConnectionPoolMockRecorder) Datacenter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Datacenter", reflect.TypeOf((*MockConnectionPool)(nil).Datacenter))
}

// Get mocks base method
func (m *MockConnectionPool) Get(arg0 context.Context) (PooledConnect, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(PooledConnect)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockConnectionPoolMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockConnectionPool)(nil).Get), arg0)
}

// GetCheck mocks base method
func (m *MockConnectionPool) GetCheck(arg0 context.Context) (PooledConnect, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCheck", arg0)
	ret0, _ := ret[0].(PooledConnect)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCheck indicates an expected call of GetCheck
func (mr *MockConnectionPoolMockRecorder) GetCheck(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCheck", reflect.TypeOf((*MockConnectionPool)(nil).GetCheck), arg0)
}

// IdleClosed mocks base method
func (m *MockConnectionPool) IdleClosed() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IdleClosed")
	ret0, _ := ret[0].(int64)
	return ret0
}

// IdleClosed indicates an expected call of IdleClosed
func (mr *MockConnectionPoolMockRecorder) IdleClosed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IdleClosed", reflect.TypeOf((*MockConnectionPool)(nil).IdleClosed))
}

// IdleTimeout mocks base method
func (m *MockConnectionPool) IdleTimeout() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IdleTimeout")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// IdleTimeout indicates an expected call of IdleTimeout
func (mr *MockConnectionPoolMockRecorder) IdleTimeout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IdleTimeout", reflect.TypeOf((*MockConnectionPool)(nil).IdleTimeout))
}

// InUse mocks base method
func (m *MockConnectionPool) InUse() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InUse")
	ret0, _ := ret[0].(int64)
	return ret0
}

// InUse indicates an expected call of InUse
func (mr *MockConnectionPoolMockRecorder) InUse() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InUse", reflect.TypeOf((*MockConnectionPool)(nil).InUse))
}

// MaxCap mocks base method
func (m *MockConnectionPool) MaxCap() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaxCap")
	ret0, _ := ret[0].(int64)
	return ret0
}

// MaxCap indicates an expected call of MaxCap
func (mr *MockConnectionPoolMockRecorder) MaxCap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxCap", reflect.TypeOf((*MockConnectionPool)(nil).MaxCap))
}

// Open mocks base method
func (m *MockConnectionPool) Open() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open")
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open
func (mr *MockConnectionPoolMockRecorder) Open() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockConnectionPool)(nil).Open))
}

// Put mocks base method
func (m *MockConnectionPool) Put(arg0 PooledConnect) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Put", arg0)
}

// Put indicates an expected call of Put
func (mr *MockConnectionPoolMockRecorder) Put(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockConnectionPool)(nil).Put), arg0)
}

// SetCapacity mocks base method
func (m *MockConnectionPool) SetCapacity(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCapacity", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCapacity indicates an expected call of SetCapacity
func (mr *MockConnectionPoolMockRecorder) SetCapacity(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCapacity", reflect.TypeOf((*MockConnectionPool)(nil).SetCapacity), arg0)
}

// SetIdleTimeout mocks base method
func (m *MockConnectionPool) SetIdleTimeout(arg0 time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetIdleTimeout", arg0)
}

// SetIdleTimeout indicates an expected call of SetIdleTimeout
func (mr *MockConnectionPoolMockRecorder) SetIdleTimeout(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIdleTimeout", reflect.TypeOf((*MockConnectionPool)(nil).SetIdleTimeout), arg0)
}

// StatsJSON mocks base method
func (m *MockConnectionPool) StatsJSON() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatsJSON")
	ret0, _ := ret[0].(string)
	return ret0
}

// StatsJSON indicates an expected call of StatsJSON
func (mr *MockConnectionPoolMockRecorder) StatsJSON() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatsJSON", reflect.TypeOf((*MockConnectionPool)(nil).StatsJSON))
}

// WaitCount mocks base method
func (m *MockConnectionPool) WaitCount() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitCount")
	ret0, _ := ret[0].(int64)
	return ret0
}

// WaitCount indicates an expected call of WaitCount
func (mr *MockConnectionPoolMockRecorder) WaitCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitCount", reflect.TypeOf((*MockConnectionPool)(nil).WaitCount))
}

// WaitTime mocks base method
func (m *MockConnectionPool) WaitTime() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitTime")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// WaitTime indicates an expected call of WaitTime
func (mr *MockConnectionPoolMockRecorder) WaitTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitTime", reflect.TypeOf((*MockConnectionPool)(nil).WaitTime))
}
