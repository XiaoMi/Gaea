// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/XiaoMi/Gaea/backend (interfaces: PooledConnect)

// Package mock_backend is a generated GoMock package.
package backend

import (
	reflect "reflect"

	mysql "github.com/XiaoMi/Gaea/mysql"
	gomock "github.com/golang/mock/gomock"
)

// MockPooledConnect is a mock of PooledConnect interface
type MockPooledConnect struct {
	ctrl     *gomock.Controller
	recorder *MockPooledConnectMockRecorder
}

// MockPooledConnectMockRecorder is the mock recorder for MockPooledConnect
type MockPooledConnectMockRecorder struct {
	mock *MockPooledConnect
}

// NewMockPooledConnect creates a new mock instance
func NewMockPooledConnect(ctrl *gomock.Controller) *MockPooledConnect {
	mock := &MockPooledConnect{ctrl: ctrl}
	mock.recorder = &MockPooledConnectMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPooledConnect) EXPECT() *MockPooledConnectMockRecorder {
	return m.recorder
}

// Begin mocks base method
func (m *MockPooledConnect) Begin() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin")
	ret0, _ := ret[0].(error)
	return ret0
}

// Begin indicates an expected call of Begin
func (mr *MockPooledConnectMockRecorder) Begin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockPooledConnect)(nil).Begin))
}

// Close mocks base method
func (m *MockPooledConnect) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockPooledConnectMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPooledConnect)(nil).Close))
}

// Commit mocks base method
func (m *MockPooledConnect) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit
func (mr *MockPooledConnectMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockPooledConnect)(nil).Commit))
}

// Execute mocks base method
func (m *MockPooledConnect) Execute(arg0 string) (*mysql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0)
	ret0, _ := ret[0].(*mysql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute
func (mr *MockPooledConnectMockRecorder) Execute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockPooledConnect)(nil).Execute), arg0)
}

// FieldList mocks base method
func (m *MockPooledConnect) FieldList(arg0, arg1 string) ([]*mysql.Field, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FieldList", arg0, arg1)
	ret0, _ := ret[0].([]*mysql.Field)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FieldList indicates an expected call of FieldList
func (mr *MockPooledConnectMockRecorder) FieldList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FieldList", reflect.TypeOf((*MockPooledConnect)(nil).FieldList), arg0, arg1)
}

// GetAddr mocks base method
func (m *MockPooledConnect) GetAddr() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddr")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAddr indicates an expected call of GetAddr
func (mr *MockPooledConnectMockRecorder) GetAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddr", reflect.TypeOf((*MockPooledConnect)(nil).GetAddr))
}

// IsClosed mocks base method
func (m *MockPooledConnect) IsClosed() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsClosed")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsClosed indicates an expected call of IsClosed
func (mr *MockPooledConnectMockRecorder) IsClosed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsClosed", reflect.TypeOf((*MockPooledConnect)(nil).IsClosed))
}

// Reconnect mocks base method
func (m *MockPooledConnect) Reconnect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reconnect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Reconnect indicates an expected call of Reconnect
func (mr *MockPooledConnectMockRecorder) Reconnect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reconnect", reflect.TypeOf((*MockPooledConnect)(nil).Reconnect))
}

// Recycle mocks base method
func (m *MockPooledConnect) Recycle() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Recycle")
}

// Recycle indicates an expected call of Recycle
func (mr *MockPooledConnectMockRecorder) Recycle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recycle", reflect.TypeOf((*MockPooledConnect)(nil).Recycle))
}

// Rollback mocks base method
func (m *MockPooledConnect) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback
func (mr *MockPooledConnectMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockPooledConnect)(nil).Rollback))
}

// SetAutoCommit mocks base method
func (m *MockPooledConnect) SetAutoCommit(arg0 byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAutoCommit", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAutoCommit indicates an expected call of SetAutoCommit
func (mr *MockPooledConnectMockRecorder) SetAutoCommit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAutoCommit", reflect.TypeOf((*MockPooledConnect)(nil).SetAutoCommit), arg0)
}

// SetCharset mocks base method
func (m *MockPooledConnect) SetCharset(arg0 string, arg1 mysql.CollationID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCharset", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetCharset indicates an expected call of SetCharset
func (mr *MockPooledConnectMockRecorder) SetCharset(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCharset", reflect.TypeOf((*MockPooledConnect)(nil).SetCharset), arg0, arg1)
}

// SetSessionVariables mocks base method
func (m *MockPooledConnect) SetSessionVariables(arg0 *mysql.SessionVariables) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSessionVariables", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetSessionVariables indicates an expected call of SetSessionVariables
func (mr *MockPooledConnectMockRecorder) SetSessionVariables(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSessionVariables", reflect.TypeOf((*MockPooledConnect)(nil).SetSessionVariables), arg0)
}

// UseDB mocks base method
func (m *MockPooledConnect) UseDB(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UseDB", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UseDB indicates an expected call of UseDB
func (mr *MockPooledConnectMockRecorder) UseDB(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseDB", reflect.TypeOf((*MockPooledConnect)(nil).UseDB), arg0)
}

// WriteSetStatement mocks base method
func (m *MockPooledConnect) WriteSetStatement() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteSetStatement")
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteSetStatement indicates an expected call of WriteSetStatement
func (mr *MockPooledConnectMockRecorder) WriteSetStatement() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteSetStatement", reflect.TypeOf((*MockPooledConnect)(nil).WriteSetStatement))
}
