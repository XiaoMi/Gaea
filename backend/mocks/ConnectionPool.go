// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	backend "github.com/XiaoMi/Gaea/backend"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// ConnectionPool is an autogenerated mock type for the ConnectionPool type
type ConnectionPool struct {
	mock.Mock
}

// Active provides a mock function with given fields:
func (_m *ConnectionPool) Active() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Addr provides a mock function with given fields:
func (_m *ConnectionPool) Addr() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Available provides a mock function with given fields:
func (_m *ConnectionPool) Available() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Capacity provides a mock function with given fields:
func (_m *ConnectionPool) Capacity() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *ConnectionPool) Close() {
	_m.Called()
}

// Get provides a mock function with given fields: ctx
func (_m *ConnectionPool) Get(ctx context.Context) (backend.PooledConnect, error) {
	ret := _m.Called(ctx)

	var r0 backend.PooledConnect
	if rf, ok := ret.Get(0).(func(context.Context) backend.PooledConnect); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(backend.PooledConnect)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IdleClosed provides a mock function with given fields:
func (_m *ConnectionPool) IdleClosed() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// IdleTimeout provides a mock function with given fields:
func (_m *ConnectionPool) IdleTimeout() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// InUse provides a mock function with given fields:
func (_m *ConnectionPool) InUse() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// MaxCap provides a mock function with given fields:
func (_m *ConnectionPool) MaxCap() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Open provides a mock function with given fields:
func (_m *ConnectionPool) Open() {
	_m.Called()
}

// Put provides a mock function with given fields: pc
func (_m *ConnectionPool) Put(pc backend.PooledConnect) {
	_m.Called(pc)
}

// SetCapacity provides a mock function with given fields: capacity
func (_m *ConnectionPool) SetCapacity(capacity int) error {
	ret := _m.Called(capacity)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(capacity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetIdleTimeout provides a mock function with given fields: idleTimeout
func (_m *ConnectionPool) SetIdleTimeout(idleTimeout time.Duration) {
	_m.Called(idleTimeout)
}

// StatsJSON provides a mock function with given fields:
func (_m *ConnectionPool) StatsJSON() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// WaitCount provides a mock function with given fields:
func (_m *ConnectionPool) WaitCount() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// WaitTime provides a mock function with given fields:
func (_m *ConnectionPool) WaitTime() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}
