// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/XiaoMi/Gaea/backend (interfaces: PooledConnect)

// Package backend is a generated GoMock package.
package backend

import (
	mysql "github.com/XiaoMi/Gaea/mysql"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockPooledConnect is a mock of PooledConnect interface
type MockPooledConnect struct {
	ctrl     *gomock.Controller
	recorder *MockPooledConnectMockRecorder
}

// MockPooledConnectMockRecorder is the mock recorder for MockPooledConnect
type MockPooledConnectMockRecorder struct {
	mock *MockPooledConnect
}

// NewMockPooledConnect creates a new mock instance
func NewMockPooledConnect(ctrl *gomock.Controller) *MockPooledConnect {
	mock := &MockPooledConnect{ctrl: ctrl}
	mock.recorder = &MockPooledConnectMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPooledConnect) EXPECT() *MockPooledConnectMockRecorder {
	return m.recorder
}

// Begin mocks base method
func (m *MockPooledConnect) Begin() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin")
	ret0, _ := ret[0].(error)
	return ret0
}

// Begin indicates an expected call of Begin
func (mr *MockPooledConnectMockRecorder) Begin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockPooledConnect)(nil).Begin))
}

// Close mocks base method
func (m *MockPooledConnect) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockPooledConnectMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPooledConnect)(nil).Close))
}

// Commit mocks base method
func (m *MockPooledConnect) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit
func (mr *MockPooledConnectMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockPooledConnect)(nil).Commit))
}

// Execute mocks base method
func (m *MockPooledConnect) Execute(arg0 string, arg1 int) (*mysql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0, arg1)
	ret0, _ := ret[0].(*mysql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute
func (mr *MockPooledConnectMockRecorder) Execute(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockPooledConnect)(nil).Execute), arg0, arg1)
}

// ExecuteWithTimeout mocks base method
func (m *MockPooledConnect) ExecuteWithTimeout(arg0 string, arg1 int, arg2 time.Duration) (*mysql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteWithTimeout", arg0, arg1, arg2)
	ret0, _ := ret[0].(*mysql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteWithTimeout indicates an expected call of ExecuteWithTimeout
func (mr *MockPooledConnectMockRecorder) ExecuteWithTimeout(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteWithTimeout", reflect.TypeOf((*MockPooledConnect)(nil).ExecuteWithTimeout), arg0, arg1, arg2)
}

// FetchMoreRows mocks base method
func (m *MockPooledConnect) FetchMoreRows(arg0 *mysql.Result, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchMoreRows", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// FetchMoreRows indicates an expected call of FetchMoreRows
func (mr *MockPooledConnectMockRecorder) FetchMoreRows(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchMoreRows", reflect.TypeOf((*MockPooledConnect)(nil).FetchMoreRows), arg0, arg1)
}

// FieldList mocks base method
func (m *MockPooledConnect) FieldList(arg0, arg1 string) ([]*mysql.Field, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FieldList", arg0, arg1)
	ret0, _ := ret[0].([]*mysql.Field)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FieldList indicates an expected call of FieldList
func (mr *MockPooledConnectMockRecorder) FieldList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FieldList", reflect.TypeOf((*MockPooledConnect)(nil).FieldList), arg0, arg1)
}

// GetAddr mocks base method
func (m *MockPooledConnect) GetAddr() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddr")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAddr indicates an expected call of GetAddr
func (mr *MockPooledConnectMockRecorder) GetAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddr", reflect.TypeOf((*MockPooledConnect)(nil).GetAddr))
}

// GetConnectionID mocks base method
func (m *MockPooledConnect) GetConnectionID() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectionID")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetConnectionID indicates an expected call of GetConnectionID
func (mr *MockPooledConnectMockRecorder) GetConnectionID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectionID", reflect.TypeOf((*MockPooledConnect)(nil).GetConnectionID))
}

// GetReturnTime mocks base method
func (m *MockPooledConnect) GetReturnTime() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReturnTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetReturnTime indicates an expected call of GetReturnTime
func (mr *MockPooledConnectMockRecorder) GetReturnTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReturnTime", reflect.TypeOf((*MockPooledConnect)(nil).GetReturnTime))
}

// IsClosed mocks base method
func (m *MockPooledConnect) IsClosed() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsClosed")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsClosed indicates an expected call of IsClosed
func (mr *MockPooledConnectMockRecorder) IsClosed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsClosed", reflect.TypeOf((*MockPooledConnect)(nil).IsClosed))
}

// MoreResultsExist mocks base method
func (m *MockPooledConnect) MoreResultsExist() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoreResultsExist")
	ret0, _ := ret[0].(bool)
	return ret0
}

// MoreResultsExist indicates an expected call of MoreResultsExist
func (mr *MockPooledConnectMockRecorder) MoreResultsExist() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoreResultsExist", reflect.TypeOf((*MockPooledConnect)(nil).MoreResultsExist))
}

// MoreRowsExist mocks base method
func (m *MockPooledConnect) MoreRowsExist() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoreRowsExist")
	ret0, _ := ret[0].(bool)
	return ret0
}

// MoreRowsExist indicates an expected call of MoreRowsExist
func (mr *MockPooledConnectMockRecorder) MoreRowsExist() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoreRowsExist", reflect.TypeOf((*MockPooledConnect)(nil).MoreRowsExist))
}

// Ping mocks base method
func (m *MockPooledConnect) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping
func (mr *MockPooledConnectMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockPooledConnect)(nil).Ping))
}

// PingWithTimeout mocks base method
func (m *MockPooledConnect) PingWithTimeout(arg0 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingWithTimeout", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PingWithTimeout indicates an expected call of PingWithTimeout
func (mr *MockPooledConnectMockRecorder) PingWithTimeout(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingWithTimeout", reflect.TypeOf((*MockPooledConnect)(nil).PingWithTimeout), arg0)
}

// ReadMoreResult mocks base method
func (m *MockPooledConnect) ReadMoreResult(arg0 int) (*mysql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMoreResult", arg0)
	ret0, _ := ret[0].(*mysql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadMoreResult indicates an expected call of ReadMoreResult
func (mr *MockPooledConnectMockRecorder) ReadMoreResult(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMoreResult", reflect.TypeOf((*MockPooledConnect)(nil).ReadMoreResult), arg0)
}

// Reconnect mocks base method
func (m *MockPooledConnect) Reconnect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reconnect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Reconnect indicates an expected call of Reconnect
func (mr *MockPooledConnectMockRecorder) Reconnect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reconnect", reflect.TypeOf((*MockPooledConnect)(nil).Reconnect))
}

// Recycle mocks base method
func (m *MockPooledConnect) Recycle() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Recycle")
}

// Recycle indicates an expected call of Recycle
func (mr *MockPooledConnectMockRecorder) Recycle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recycle", reflect.TypeOf((*MockPooledConnect)(nil).Recycle))
}

// Rollback mocks base method
func (m *MockPooledConnect) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback
func (mr *MockPooledConnectMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockPooledConnect)(nil).Rollback))
}

// SetAutoCommit mocks base method
func (m *MockPooledConnect) SetAutoCommit(arg0 byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAutoCommit", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAutoCommit indicates an expected call of SetAutoCommit
func (mr *MockPooledConnectMockRecorder) SetAutoCommit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAutoCommit", reflect.TypeOf((*MockPooledConnect)(nil).SetAutoCommit), arg0)
}

// SetCharset mocks base method
func (m *MockPooledConnect) SetCharset(arg0 string, arg1 mysql.CollationID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCharset", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetCharset indicates an expected call of SetCharset
func (mr *MockPooledConnectMockRecorder) SetCharset(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCharset", reflect.TypeOf((*MockPooledConnect)(nil).SetCharset), arg0, arg1)
}

// SetSessionVariables mocks base method
func (m *MockPooledConnect) SetSessionVariables(arg0 *mysql.SessionVariables) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSessionVariables", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncSessionVariables mocks base method
func (m *MockPooledConnect) SyncSessionVariables(arg0 *mysql.SessionVariables) (error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncSessionVariables", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSessionVariables indicates an expected call of SetSessionVariables
func (mr *MockPooledConnectMockRecorder) SetSessionVariables(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSessionVariables", reflect.TypeOf((*MockPooledConnect)(nil).SetSessionVariables), arg0)
}

// UseDB mocks base method
func (m *MockPooledConnect) UseDB(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UseDB", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UseDB indicates an expected call of UseDB
func (mr *MockPooledConnectMockRecorder) UseDB(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseDB", reflect.TypeOf((*MockPooledConnect)(nil).UseDB), arg0)
}

// WriteSetStatement mocks base method
func (m *MockPooledConnect) WriteSetStatement() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteSetStatement")
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteSetStatement indicates an expected call of WriteSetStatement
func (mr *MockPooledConnectMockRecorder) WriteSetStatement() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteSetStatement", reflect.TypeOf((*MockPooledConnect)(nil).WriteSetStatement))
}
